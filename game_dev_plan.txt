### **Project: Cryptic Crossword Quest**

A modern, web-based cryptic crossword game designed to be accessible for beginners and engaging for experts.

---

### **Phase 1: The Playable Core (MVP)**

**Goal:** A player can visit the website, load a pre-defined puzzle, and solve it. This phase focuses entirely on core functionality.

*   **Backend (FastAPI & SQLite):**
    1.  **Project Setup:** Initialize a Python project with FastAPI.
    2.  **Database Models:** Define the initial database schema for `Puzzles` and `Clues` in SQLAlchemy.
        *   `Puzzle`: id, name, difficulty
        *   `Clue`: id, puzzle_id, number, direction (Across/Down), text, answer, grid_position
    3.  **API Endpoints:**
        *   `GET /api/puzzles`: Returns a list of all available puzzles (id, name, difficulty).
        *   `GET /api/puzzles/{id}`: Returns the full data for a single puzzle (clues, answers, grid layout).
        *   `POST /api/puzzles/{id}/check`: Allows the frontend to send a word or the full grid for validation.

*   **Frontend (React & Vite):**
    1.  **Project Setup:** Initialize a new React project using **Vite** for a fast development environment.
    2.  **State Management:** Integrate **Zustand** to manage the application's global state (e.g., current puzzle data, grid state).
    3.  **Core Components:**
        *   `GridComponent`: A 15x15 interactive grid that accepts keyboard input.
        *   `CluesComponent`: Displays two lists of clues ("Across" and "Down").
        *   `GamePage`: The main view that combines the `GridComponent` and `CluesComponent`.

*   **Quality & Deployment:**
    1.  **Version Control:** Set up a Git repository and commit initial project structures.
    2.  **Testing:**
        *   Write basic API tests to ensure the `/puzzles` and `/puzzles/{id}` endpoints work correctly.
        *   Write simple frontend tests to verify that the `GridComponent` and `CluesComponent` render without errors.
    3.  **Content:** Manually create and load **5 "Easy"** puzzles into the SQLite database.

---

### **Phase 2: Enhancing the User Experience**

**Goal:** Make the game more polished, intuitive, and engaging for a first-time user.

*   **Backend:**
    *   (No significant changes required in this phase; the existing API supports these features.)

*   **Frontend:**
    1.  **UI/UX Refinements:**
        *   Implement a clean, minimalist visual theme.
        *   Ensure the layout is fully responsive for both mobile and desktop screens.
        *   Create a `HomePage` that serves as a main menu to select a puzzle from a list.
    2.  **Gameplay Features:**
        *   **Clue Interaction:** When a player clicks a clue in the list, the corresponding cells in the grid are highlighted.
        *   **Hint System:** Add two buttons:
            *   "Reveal Letter": Fills in the correct letter for the selected cell.
            *   "Check Word": Validates the currently selected word against the solution.
    3.  **Educational Content:**
        *   Create a "How to Play" modal or page that explains the basics of cryptic crosswords.

*   **Quality & Deployment:**
    1.  **Testing:** Write new frontend tests for the hint system and clue-selection interactions.

*   **Content:**
    1.  Create and add **5-10 "Medium"** difficulty puzzles.

---

### **Phase 3: Player Progression & Retention**

**Goal:** Introduce user accounts to allow players to track their progress and stay engaged over time.

*   **Backend:**
    1.  **Database Migration:** Upgrade the database from **SQLite to PostgreSQL** to handle concurrent users reliably.
    2.  **User Authentication:**
        *   Add `Users` table to the database (username, hashed_password).
        *   Implement `POST /api/auth/register` and `POST /api/auth/login` endpoints that issue JWT tokens.
    3.  **Progress Tracking:**
        *   Create a `PuzzleProgress` table to store the state of a user's current grid for each puzzle.
        *   Implement `POST /api/puzzles/{id}/save` (authenticated) to save progress. The `GET /api/puzzles/{id}` endpoint should now automatically load saved progress if the user is logged in.

*   **Frontend:**
    1.  **Authentication Pages:** Create `LoginPage` and `RegisterPage` forms.
    2.  **Progress Management:**
        *   Automatically save the user's grid state every few seconds.
        *   When a puzzle is loaded, automatically populate the grid with saved progress.
    3.  **User Dashboard:** Create a simple `ProfilePage` to display user stats like "Puzzles Completed" and "Current Streak."

*   **Quality & Deployment:**
    1.  **Security:** Ensure all user-data-related endpoints are protected and require authentication.
    2.  **Testing:** Write tests for user registration, login, and progress saving/loading logic.

---

### **Phase 4: Sustainable Growth & Advanced Features**

**Goal:** Build a system for easily adding new content and introduce advanced features for dedicated players.

*   **Backend:**
    1.  **Content Pipeline:** Develop a simple, secure **internal tool** (it can be a separate, password-protected web page) that allows an administrator to easily create, edit, and delete puzzles and clues in the database. This is crucial for long-term sustainability.

*   **Frontend:**
    1.  **Advanced Hints:** Implement an "Explain Clue" feature that reveals the logic behind a clue's answer (for Easy/Medium puzzles).
    2.  **Puzzle Filtering:** Allow users to filter the puzzle list by difficulty.
    3.  **Settings:** Add a settings page for toggling features (e.g., auto-check answers as they are typed).

*   **Quality & Deployment:**
    1.  **Infrastructure:** Set up separate `staging` and `production` environments for deployment to test features safely before release.
    2.  **Monitoring:** Add basic logging and performance monitoring to the backend.

*   **Content:**
    1.  Use the new content tool to add **"Hard"** difficulty puzzles.
    2.  Begin tagging clues by type (e.g., "Anagram," "Homophone") in the database to enable future features.
